<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Council of Elrond</title>
    <link>https://songkou.github.io/</link>
    <description>Recent content on Council of Elrond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2023 23:23:10 +0800</lastBuildDate><atom:link href="https://songkou.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smart Way to do Regex</title>
      <link>https://songkou.github.io/posts/smart_way_do_regex/</link>
      <pubDate>Fri, 06 Oct 2023 23:23:10 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/smart_way_do_regex/</guid>
      <description>Below is a sample code that I found to get complex regex pattern instead of write it manually good example to make smaller parts first the combine to a very complex pattern.
import re # convert the {name} test to rules in predefined format in macros def regex_expand(macros, pattern, guarded = True): output = [] pos = 0 size = len(pattern) while pos &amp;lt; size: ch = pattern[pos] if ch == &amp;#39;\\&amp;#39;: output.</description>
    </item>
    
    <item>
      <title>CDN_Cache_Cluster_communication</title>
      <link>https://songkou.github.io/posts/cdn_cache_cluster_communication/</link>
      <pubDate>Mon, 16 May 2022 12:29:04 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/cdn_cache_cluster_communication/</guid>
      <description>Cache Cluster Communication The main goal of collaborative interaction within the Cache server cluster is to establish a good communication channel between each server node, communicate in a timely manner about the content cache on the server, and provide users with a good service experience through collaboration between servers in the cluster.
Communication between Cache server clusters can be divided into two categories: loose coupling and tight coupling. Among them, loosely coupled Cache communication protocols based on network messages include: ICP, HTCP, Cache Digest, Cache Pre-filling, etc.</description>
    </item>
    
    <item>
      <title>Load_Balancing</title>
      <link>https://songkou.github.io/posts/load_balancing/</link>
      <pubDate>Sun, 20 Mar 2022 21:29:04 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/load_balancing/</guid>
      <description>4.3 负载均衡技术的实现
负载均衡（Server Load Balance），含义是将负载（工作任务）进行平衡、分摊到多个操作单元上进行执行，从而实现整个系统共同完成任务。
负载均衡提供了一种廉价又有效的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。根据负载均衡实施目的的不同，可以把负载均衡分为两种。一种是任务分担，大量的并发访问或数据流量分担到多台设备上分别处理，每台设备都完成一个相对完整的请求响应过程；另一种是协同计算，把一个重负载的计算任务分担到多台设备上做并行处理，各台设备处理结束后，将结果进行汇总计算。
如前文所述，负载均衡的关键在于能够使任务负载在集群中的服务器上被尽可能均衡地承载，避免出现集群中某几台服务器超载而其他服务器闲置的情况。在实现了负载均衡的集群中，多台服务器通过网络连接在一起，通过在集群前端部署负载均衡设备，根据预先配置的均衡策略将用户请求在集群中分发，并维护服务器的可用性。负载均衡实现的示意图如图 4-3 所示。
图 4-3 负载均衡实现示意图
从图 4-3 中可以看出，负载均衡设备能够在服务器之前截获到客户端发来的用户请求，然后按照预先配置的负载均衡策略将其分发到合适的后端服务器上。因此，客户端发出的业务请求报文首先都要发送到负载均衡设备的 IP 地址上，因为该地址并不负责处理实际的业务操作，因此通常将该地址称为虚拟 IP 地址，而将后端真正的业务服务器称为真实服务器。负载均衡设备通过虚拟 IP 地址和客户端通信，再将负载合理地分配给真实服务器。
在很长一段时间内，负载均衡主要是在 OSI 七层网络协议栈的第四层展开，而随着业务类型的日益丰富、用户精细化需求的不断提升和深度剖析技术的极大完善，基于第七层的负载均衡技术已逐渐成为主流。 4.3.1 负载均衡关键技术
负载均衡的目标是合理地将用户请求分发到合适的服务器上，从而达到系统处理的最优方案，其关键技术包括：负载均衡分发、会话持续性保证、服务器健康检测等。
1.负载均衡调度算法
负载均衡调度算法的目标是将用户请求和相关流量高效、正确地分发到处于正常工作状态的服务器上，使得各台服务器尽可能地保持负载均衡。
目前商用系统中已经使用了非常丰富的负载均衡调度算法，总体而言调度算法可以分为静态算法和动态算法两大类。静态算法是指按照预先设定的策略进行分发，而不考虑当前服务器的实际负载情况，其实现比较简单快捷。典型的静态算法包括轮询、加权轮询、随机、加权随机、基于源 IP 的 Hash、基于源 IP 端口的 Hash、基于目的 IP 的 Hash、基于 UDP 报文净荷的 Hash 等；动态算法能够根据各服务器实际运行中的负载情况进行连接分发，具有更优的均衡效果，典型的动态算法包括基于最小连接、基于加权最小连接、最小响应时间等。
（1）轮询（Round Robin）：依次将请求分发到不同的服务器上，使得各台服务器平均分担用户的连接请求，该算法适用于集群中各服务器性能相当而无明显优劣差异的场景。
（2）加权轮询（Weighted Round Robin）：依次将请求分发到不同的服务器上，其中权值大的分配较多请求，权值小的分配较少请求，该算法利用权值标识服务器间的性能差异，适用于各服务器间性能不一的场景。
（3）随机（Random）：随机地将请求分发到不同的服务器上，从统计学角度看，调度的结果为各台服务器平均分担用户的连接请求，该算法适用于集群中各服务器性能相当而无明显优劣差异的场景。
（4）加权随机（Weighted Random）：随机地将请求分发到不同的服务器上，从统计学角度看，调度的结果为各台服务器按照权值比重分担用户的连接请求，该算法适用于集群中各服务器性能存在差异的场景。
（5）基于源 IP 的 Hash（Source IP Hashing）：通过一个 Hash 函数将来自同一个源 IP 地址的请求映射到一台服务器上，该算法适用于需要保证来自同一用户的请求被分发到同一台服务器的场景。
（6）基于源 IP 端口的 Hash（Source IP and Source Port Hashing）：通过一个 Hash 函数将来自同一个源 IP 地址和源端口号的请求映射到一台服务器上，该算法适用于需要保证来自同一用户同一业务的请求被分发到同一台服务器的场景。</description>
    </item>
    
    <item>
      <title>Low_Latency_Network_Architecture</title>
      <link>https://songkou.github.io/posts/low_latency_network_architecture/</link>
      <pubDate>Thu, 10 Mar 2022 20:04:01 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/low_latency_network_architecture/</guid>
      <description>exchange trading system General Description of Exchange trading system architecture Below is a very simple example of all the key components of a exchange trading system. Legacy system commonly run o a centralized server to process multiple tasks, and network is holding marketdata, order routing system, Clearing.
The lower the trading system is, the higher amount of orders it can handle. To me, in terms of the HFT firms, the most important thing is the lower the latency is, the higher chance you get the information and make the deal, which can make you a better advantage vs other trading firms.</description>
    </item>
    
    <item>
      <title>CDN_Notes</title>
      <link>https://songkou.github.io/posts/cdn_notes/</link>
      <pubDate>Sat, 08 Jan 2022 02:36:13 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/cdn_notes/</guid>
      <description>Content Delivery Network Below is all my personal understandings
Full Name :Content Delivery Network or Content Ddistribute Network Basically, CDN solution solves a common issue: There will always be a bottleneck on the internet, due to different service providers, or geo locations, etc. Which impact the network performance. On the other hand, Latency control is one of the most important indicators nowadays. With CDN, You can deliver a more reliable and stable network by putting certain Servers in certain places in the internet, and building a intelligent network on top of the internet.</description>
    </item>
    
    <item>
      <title>Git_cheat_sheet</title>
      <link>https://songkou.github.io/posts/git_cheat_sheet/</link>
      <pubDate>Sat, 25 Dec 2021 01:31:18 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/git_cheat_sheet/</guid>
      <description>Git cheat sheet Configure Configure system/global level of current repository username, email
git config --global user.name &amp;quot;Jerry Mouse&amp;quot; git config --global user.email &amp;quot;jerry@yiibai.com&amp;quot;` List git configs
git config --list git config -l` initialize git init Modify commit git add a.html git commit -m &amp;quot;提交文件a.html&amp;quot; git revert- is about making a new commit that reverts the changes made by other commits.git reset is about updating your branch, moving the tip in order to add or remove commits from the branch.</description>
    </item>
    
    <item>
      <title>Python_One_line</title>
      <link>https://songkou.github.io/posts/python_one_line/</link>
      <pubDate>Mon, 22 Nov 2021 22:08:48 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_one_line/</guid>
      <description>Tricks to write Python in one line Get dict output value dict_test = {&amp;#34;A&amp;#34;: 100, &amp;#34;B&amp;#34;: 99, &amp;#34;C&amp;#34;: 33, &amp;#34;D&amp;#34;: 120} output = [(key, value) for key, value in dict_test.items() if value &amp;gt;= 100] print(f&amp;#34;the output is ：{output}&amp;#34;) the output is ：[(&amp;#39;A&amp;#39;, 100), (&amp;#39;D&amp;#39;, 120)] type(output) list Filter words that is more than 3 characters in a sentence text = &amp;#39;&amp;#39;&amp;#39;Outside, the moon is shedding its cold light on the cold snow,\nand the white-bearded fir-trees round Camp Villa1 are casting a blue shadow across the white ground, \nwhile the Rev2&amp;#39;&amp;#39;&amp;#39; output = [[x for x in line.</description>
    </item>
    
    <item>
      <title>Python_Regex</title>
      <link>https://songkou.github.io/posts/python_regex/</link>
      <pubDate>Tue, 12 Oct 2021 20:59:46 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_regex/</guid>
      <description>Some Advanced usage on regex get float number: import re target = &amp;#39;total growth is : 8%-8.5%&amp;#39; rate = re.findall(&amp;#39;(\d+(?:\.\d+)?)&amp;#39;, target) print(rate) [&amp;#39;8&amp;#39;, &amp;#39;8.5&amp;#39;] #\d is any int, + is one to many #(?:...) #A non-capturing group allows you to apply quantifiers to part of your regex but does not capture/assign an ID. #so it means: find int or, if int follows a &amp;#34;.&amp;#34; and any int afterwards, combine the int with &amp;#34;.</description>
    </item>
    
    <item>
      <title>Mysql_frequently_used_commands</title>
      <link>https://songkou.github.io/posts/mysql_frequently_used_commands/</link>
      <pubDate>Wed, 22 Sep 2021 10:39:22 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/mysql_frequently_used_commands/</guid>
      <description>###Note for frequently used sql commands, just in case forget when long time don&amp;rsquo;t use it
let&amp;rsquo;s say you want a below table:
# name_of column type length can empty master key 1 id int 12 no yes 2 topic varchar 255 no no 3 content longtext yes no 4 tag varchar 255 yes no 5 insert_time datetime yes no to create above table:
CREATE TABLE IF NOT EXISTS `mq_info` ( `id` INT(12) UNSIGNED AUTO_INCREMENT COMMENT &amp;#39;auto increase id&amp;#39;, `topic` VARCHAR ( 255 ) NOT NULL COMMENT &amp;#39;topic name&amp;#39;, `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;, `tag` VARCHAR ( 255 ) COMMENT &amp;#39;tag of this Message Queue&amp;#39;, PRIMARY KEY ( `id` ) ) ENGINE = INNODB DEFAULT CHARSET = utf8; Query all data in table:</description>
    </item>
    
    <item>
      <title>Mysql_installation</title>
      <link>https://songkou.github.io/posts/mysql_installation/</link>
      <pubDate>Sun, 07 Feb 2021 18:33:58 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/mysql_installation/</guid>
      <description>The general view of the difference between mysql and marinaDB can refer to this link:
https://blog.panoply.io/a-comparative-vmariadb-vs-mysql
And I quote some here:
MySQL: MySQL is an open-source relational database management system (RDBMS). Just like all other relational databases, MySQL uses tables, constraints, triggers, roles, stored procedures and views as the core components that you work with. A table consists of rows, and each row contains a same set of columns. MySQL uses primary keys to uniquely identify each row (a.</description>
    </item>
    
    <item>
      <title>Python_mysql</title>
      <link>https://songkou.github.io/posts/python_mysql/</link>
      <pubDate>Sun, 07 Feb 2021 13:21:07 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_mysql/</guid>
      <description>Python Query mysql To use Python to query mysql DB. There are two popular modules are used:
pymysql sqlalchemy ( need to install mysqlconnector in my scenario) pip install mysql-connector-python pymysql: ekoudb = pymysql.connect(host=&amp;#39;10.10.80.127&amp;#39;, port=3306, user=&amp;#39;ekou&amp;#39;, password=&amp;#39;abcd12334&amp;#39;, database=&amp;#39;ekoutest&amp;#39;) #get cursor cursor = ekoudb.cursor() def insert_a_item(SqlLang): &amp;#34;&amp;#34;&amp;#34; Insert items &amp;#34;&amp;#34;&amp;#34; try: cursor.execute(SqlLang) ekoudb.commit() except Exception as e: print(&amp;#39;Insert data fail&amp;#39;) print(e) ekoudb.rollback() # release resource cursor.close() ekoudb.close() #insert_a_item(SQL_INSERT_A_ITEM) SQL_INSERT_MANY_ITEMS = &amp;#34;INSERT INTO bird_table (origin, hostname,descr,ver,protocol,neighboraddr,neighboras,status,sinceday,sincetime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)&amp;#34; MULTIENTRY = [[&amp;#34;update&amp;#34;,&amp;#34;host1&amp;#34;,&amp;#34;descr1&amp;#34;,&amp;#34;ipv6&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;2123123&amp;#34;,&amp;#34;231233&amp;#34;,&amp;#34;Idle&amp;#34;,&amp;#34;2021-02-02&amp;#34;,&amp;#34;16:50:07&amp;#34;],\ [&amp;#34;update&amp;#34;,&amp;#34;host2&amp;#34;,&amp;#34;descr2&amp;#34;,&amp;#34;ipv6&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;ipv6_addr1&amp;#34;,&amp;#34;65300&amp;#34;,&amp;#34;Idle&amp;#34;,&amp;#34;2021-02-02&amp;#34;,&amp;#34;16:50:07&amp;#34;],\ [&amp;#34;update&amp;#34;,&amp;#34;host3&amp;#34;,&amp;#34;descr3&amp;#34;,&amp;#34;ipv4&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;10.</description>
    </item>
    
    <item>
      <title>Linux_name_space</title>
      <link>https://songkou.github.io/posts/linux_name_space/</link>
      <pubDate>Fri, 01 Jan 2021 14:52:01 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/linux_name_space/</guid>
      <description>Linux NameSpace Docker denpends on Linux NameSpace, Thus this is a brief explaination on linux name space.
We can use unshare command to manipulate/playaround with linux name spaces.
How to check what kind of linux namespace is supported We can use “man unshare” to check what kind of linux namespace is supported. There are 8 types of name spaces:
mount namespace Mounting and unmounting filesystems will not affect the rest of the system (CLONE_NEWNS flag), except for filesystems which are explicitly marked as shared (with mount --make-shared; see /proc/self/mountinfo or findmnt -o+PROPAGATION for the shared flags).</description>
    </item>
    
    <item>
      <title>squid_setup</title>
      <link>https://songkou.github.io/posts/squid_setup/</link>
      <pubDate>Thu, 18 Jun 2020 23:15:45 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/squid_setup/</guid>
      <description>1. yum -y update 2. yum install openssl 3. yum install squid 4. vim /etc/squid/squid.conf 5. tail -f /var/log/squid/access.log 6. systemctl start squid 7. systemctl status squid 8. ss -nlp | grep squid | grep 3128 dns_nameservers 8.8.8.8 8.8.4.4 </description>
    </item>
    
  </channel>
</rss>
