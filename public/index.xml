<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Council of Elrond</title>
    <link>https://songkou.github.io/</link>
    <description>Recent content on Council of Elrond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2023 23:23:10 +0800</lastBuildDate><atom:link href="https://songkou.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smart Way to do Regex</title>
      <link>https://songkou.github.io/posts/smart_way_do_regex/</link>
      <pubDate>Fri, 06 Oct 2023 23:23:10 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/smart_way_do_regex/</guid>
      <description>Below is a sample code that I found to get complex regex pattern instead of write it manually good example to make smaller parts first the combine to a very complex pattern.
import re # convert the {name} test to rules in predefined format in macros def regex_expand(macros, pattern, guarded = True): output = [] pos = 0 size = len(pattern) while pos &amp;lt; size: ch = pattern[pos] if ch == &amp;#39;\\&amp;#39;: output.</description>
    </item>
    
    <item>
      <title>Git_cheat_sheet</title>
      <link>https://songkou.github.io/posts/git_cheat_sheet/</link>
      <pubDate>Sat, 25 Dec 2021 01:31:18 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/git_cheat_sheet/</guid>
      <description>Git cheat sheet Configure Configure system/global level of current repository username, email
git config --global user.name &amp;quot;Jerry Mouse&amp;quot; git config --global user.email &amp;quot;jerry@yiibai.com&amp;quot;` List git configs
git config --list git config -l` initialize git init Modify commit git add a.html git commit -m &amp;quot;提交文件a.html&amp;quot; git revert- is about making a new commit that reverts the changes made by other commits.git reset is about updating your branch, moving the tip in order to add or remove commits from the branch.</description>
    </item>
    
    <item>
      <title>Python_One_line</title>
      <link>https://songkou.github.io/posts/python_one_line/</link>
      <pubDate>Mon, 22 Nov 2021 22:08:48 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_one_line/</guid>
      <description>Tricks to write Python in one line Get dict output value dict_test = {&amp;#34;A&amp;#34;: 100, &amp;#34;B&amp;#34;: 99, &amp;#34;C&amp;#34;: 33, &amp;#34;D&amp;#34;: 120} output = [(key, value) for key, value in dict_test.items() if value &amp;gt;= 100] print(f&amp;#34;the output is ：{output}&amp;#34;) the output is ：[(&amp;#39;A&amp;#39;, 100), (&amp;#39;D&amp;#39;, 120)] type(output) list Filter words that is more than 3 characters in a sentence text = &amp;#39;&amp;#39;&amp;#39;Outside, the moon is shedding its cold light on the cold snow,\nand the white-bearded fir-trees round Camp Villa1 are casting a blue shadow across the white ground, \nwhile the Rev2&amp;#39;&amp;#39;&amp;#39; output = [[x for x in line.</description>
    </item>
    
    <item>
      <title>Python_Regex</title>
      <link>https://songkou.github.io/posts/python_regex/</link>
      <pubDate>Tue, 12 Oct 2021 20:59:46 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_regex/</guid>
      <description>Some Advanced usage on regex get float number: import re target = &amp;#39;total growth is : 8%-8.5%&amp;#39; rate = re.findall(&amp;#39;(\d+(?:\.\d+)?)&amp;#39;, target) print(rate) [&amp;#39;8&amp;#39;, &amp;#39;8.5&amp;#39;] #\d is any int, + is one to many #(?:...) #A non-capturing group allows you to apply quantifiers to part of your regex but does not capture/assign an ID. #so it means: find int or, if int follows a &amp;#34;.&amp;#34; and any int afterwards, combine the int with &amp;#34;.</description>
    </item>
    
    <item>
      <title>Mysql_frequently_used_commands</title>
      <link>https://songkou.github.io/posts/mysql_frequently_used_commands/</link>
      <pubDate>Wed, 22 Sep 2021 10:39:22 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/mysql_frequently_used_commands/</guid>
      <description>###Note for frequently used sql commands, just in case forget when long time don&amp;rsquo;t use it
let&amp;rsquo;s say you want a below table:
# name_of column type length can empty master key 1 id int 12 no yes 2 topic varchar 255 no no 3 content longtext yes no 4 tag varchar 255 yes no 5 insert_time datetime yes no to create above table:
CREATE TABLE IF NOT EXISTS `mq_info` ( `id` INT(12) UNSIGNED AUTO_INCREMENT COMMENT &amp;#39;auto increase id&amp;#39;, `topic` VARCHAR ( 255 ) NOT NULL COMMENT &amp;#39;topic name&amp;#39;, `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;, `tag` VARCHAR ( 255 ) COMMENT &amp;#39;tag of this Message Queue&amp;#39;, PRIMARY KEY ( `id` ) ) ENGINE = INNODB DEFAULT CHARSET = utf8; Query all data in table:</description>
    </item>
    
    <item>
      <title>Mysql_installation</title>
      <link>https://songkou.github.io/posts/mysql_installation/</link>
      <pubDate>Sun, 07 Feb 2021 18:33:58 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/mysql_installation/</guid>
      <description>The general view of the difference between mysql and marinaDB can refer to this link:
https://blog.panoply.io/a-comparative-vmariadb-vs-mysql
And I quote some here:
MySQL: MySQL is an open-source relational database management system (RDBMS). Just like all other relational databases, MySQL uses tables, constraints, triggers, roles, stored procedures and views as the core components that you work with. A table consists of rows, and each row contains a same set of columns. MySQL uses primary keys to uniquely identify each row (a.</description>
    </item>
    
    <item>
      <title>Python_mysql</title>
      <link>https://songkou.github.io/posts/python_mysql/</link>
      <pubDate>Sun, 07 Feb 2021 13:21:07 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/python_mysql/</guid>
      <description>Python Query mysql To use Python to query mysql DB. There are two popular modules are used:
pymysql sqlalchemy ( need to install mysqlconnector in my scenario) pip install mysql-connector-python pymysql: ekoudb = pymysql.connect(host=&amp;#39;10.10.80.127&amp;#39;, port=3306, user=&amp;#39;ekou&amp;#39;, password=&amp;#39;abcd12334&amp;#39;, database=&amp;#39;ekoutest&amp;#39;) #get cursor cursor = ekoudb.cursor() def insert_a_item(SqlLang): &amp;#34;&amp;#34;&amp;#34; Insert items &amp;#34;&amp;#34;&amp;#34; try: cursor.execute(SqlLang) ekoudb.commit() except Exception as e: print(&amp;#39;Insert data fail&amp;#39;) print(e) ekoudb.rollback() # release resource cursor.close() ekoudb.close() #insert_a_item(SQL_INSERT_A_ITEM) SQL_INSERT_MANY_ITEMS = &amp;#34;INSERT INTO bird_table (origin, hostname,descr,ver,protocol,neighboraddr,neighboras,status,sinceday,sincetime) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)&amp;#34; MULTIENTRY = [[&amp;#34;update&amp;#34;,&amp;#34;host1&amp;#34;,&amp;#34;descr1&amp;#34;,&amp;#34;ipv6&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;2123123&amp;#34;,&amp;#34;231233&amp;#34;,&amp;#34;Idle&amp;#34;,&amp;#34;2021-02-02&amp;#34;,&amp;#34;16:50:07&amp;#34;],\ [&amp;#34;update&amp;#34;,&amp;#34;host2&amp;#34;,&amp;#34;descr2&amp;#34;,&amp;#34;ipv6&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;ipv6_addr1&amp;#34;,&amp;#34;65300&amp;#34;,&amp;#34;Idle&amp;#34;,&amp;#34;2021-02-02&amp;#34;,&amp;#34;16:50:07&amp;#34;],\ [&amp;#34;update&amp;#34;,&amp;#34;host3&amp;#34;,&amp;#34;descr3&amp;#34;,&amp;#34;ipv4&amp;#34;,&amp;#34;BGP&amp;#34;,&amp;#34;10.</description>
    </item>
    
    <item>
      <title>Linux_name_space</title>
      <link>https://songkou.github.io/posts/linux_name_space/</link>
      <pubDate>Fri, 01 Jan 2021 14:52:01 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/linux_name_space/</guid>
      <description>Linux NameSpace Docker denpends on Linux NameSpace, Thus this is a brief explaination on linux name space.
We can use unshare command to manipulate/playaround with linux name spaces.
How to check what kind of linux namespace is supported We can use “man unshare” to check what kind of linux namespace is supported. There are 8 types of name spaces:
mount namespace Mounting and unmounting filesystems will not affect the rest of the system (CLONE_NEWNS flag), except for filesystems which are explicitly marked as shared (with mount --make-shared; see /proc/self/mountinfo or findmnt -o+PROPAGATION for the shared flags).</description>
    </item>
    
    <item>
      <title>squid_setup</title>
      <link>https://songkou.github.io/posts/squid_setup/</link>
      <pubDate>Thu, 18 Jun 2020 23:15:45 +0800</pubDate>
      
      <guid>https://songkou.github.io/posts/squid_setup/</guid>
      <description>1. yum -y update 2. yum install openssl 3. yum install squid 4. vim /etc/squid/squid.conf 5. tail -f /var/log/squid/access.log 6. systemctl start squid 7. systemctl status squid 8. ss -nlp | grep squid | grep 3128 dns_nameservers 8.8.8.8 8.8.4.4 </description>
    </item>
    
  </channel>
</rss>
